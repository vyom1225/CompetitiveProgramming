vector<int> seg;
vector<int> a;
vector<int> lazy;

void build(int v , int tl , int tr){
    if(tl == tr){
        seg[v] = a[tl];
        lazy[v] = 0;
    }else{
        int m = (tl + tr)/2;
 
        build(2*v , tl , m);
        build(2*v + 1 , m+1 , tr);
 
        seg[v] = max(seg[2*v],seg[2*v + 1]);

    }
}

void push(int v){

    seg[2*v] += lazy[v];
    seg[2*v + 1] += lazy[v];

    //lazy Propagation
    lazy[2*v] += lazy[v];
    lazy[2*v + 1] += lazy[v];
    
    lazy[v] = 0;
}
 
void update(int v , int tl , int tr , int l , int r , int val){
    if(l > r) return;
    if(tl == l && tr == r){
        seg[v] += val;
        lazy[v] += val;
    }else{
        push(v);
        int tm = (tl + tr)/2;

        update(2*v , tl , tm , l , min(tm , r) , val);
        update(2*v + 1 , tm + 1 , tr , max(l,tm+1) , r , val);
 
        seg[v] = max(seg[2*v],seg[2*v + 1]);
    }
}
 
int query(int v , int tl , int tr , int l , int r){
    if(l == 0 && r == 0) return 0;
    if(l > r) return -1e18;
    if(l == tl && r == tr) return seg[v];
    
    push(v);
    int tm = (tl + tr)/2;
    int left = query(2*v , tl , tm , l , min(tm,r));
    int right = query(2*v + 1 , tm+1 , tr , max(l , tm+1) , r);
 
    return max(left,right);
}